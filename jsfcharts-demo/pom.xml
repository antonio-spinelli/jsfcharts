<?xml version="1.0"?>
<project
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"
	xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>jsfcharts</artifactId>
		<groupId>org.eiw</groupId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<groupId>org.eiw</groupId>
	<artifactId>jsfcharts-demo</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>
	<name>jsfcharts-demo</name>
	<url>http://maven.apache.org</url>

	<properties>
		<!-- Explicitly declaring the source encoding eliminates the following 
			message: [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
			resources, i.e. build is platform dependent! -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<!-- To set the jboss.home environment variable the Maven way, set the 
			jboss.home property in an active profile in the Maven 2 settings.xml file -->
		<jboss.home>${env.JBOSS_HOME}</jboss.home>
		<jboss.domain>default</jboss.domain>
		<!-- The version of Weld extensions in use -->
		<weld.extensions.version>1.0.0-CR2</weld.extensions.version>
	</properties>


	<dependencyManagement>
		<dependencies>
			<!-- Import scope will provide versions for dependencies below. -->
			<dependency>
				<groupId>org.jboss.weld</groupId>
				<artifactId>weld-extensions-bom</artifactId>
				<version>${weld.extensions.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<dependencies>

		<!-- CDI (JSR-299) -->
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Common annotations (e.g., @PostConstruct, @PreDestroy, @Generated, 
			@Resource) -->
		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Bean Validation (JSR-303) -->
		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- Bean Validation Implementation -->
		<!-- Provides portable constraints such as @NotEmpty, @Email and @Url -->
		<!-- Hibernate Validator is the only JSR-303 implementation at the moment, 
			so we can assume it's provided -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<version>4.0.0.GA</version>
			<scope>provided</scope>
		</dependency>

		<!-- Optional, but highly recommended. -->
		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<version>5.10</version>
			<scope>test</scope>
			<classifier>jdk15</classifier>
		</dependency>

		<!-- Needed on JBoss AS as EL is out of date -->
		<dependency>
			<groupId>org.glassfish.web</groupId>
			<artifactId>el-impl</artifactId>
			<scope>runtime</scope>
			<!-- FIXME this version should be in the Weld API BOM -->
			<version>2.1.2-b04</version>
			<exclusions>
				<exclusion>
					<groupId>javax.el</groupId>
					<artifactId>el-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>


		<dependency>
			<groupId>org.eiw</groupId>
			<artifactId>jsfcharts-core</artifactId>
			<version>${project.version}</version>
		</dependency>
		<dependency>
			<groupId>org.eiw</groupId>
			<artifactId>jsfcharts-jslib</artifactId>
			<version>${project.version}</version>
		</dependency>

	</dependencies>
	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<!-- Configure the Embedded GlassFish Maven plugin -->
			<plugin>
				<groupId>org.glassfish</groupId>
				<artifactId>maven-embedded-glassfish-plugin</artifactId>
				<version>3.1.1</version>
				<configuration>
					<app>${project.build.directory}/${project.build.finalName}.war</app>
					<port>7070</port>
					<containerType>web</containerType>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>org.osgi</groupId>
						<artifactId>org.osgi.core</artifactId>
						<version>4.2.0</version>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<!-- Deploy on a local JBoss + activate JRebel -->
			<id>dev</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.jboss.as.plugins</groupId>
						<artifactId>jboss-as-maven-plugin</artifactId>
						<version>7.1.1.Final</version>
						<executions>
							<execution>
								<goals>
									<goal>deploy</goal>
								</goals>
								<phase>integration-test</phase>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.zeroturnaround</groupId>
						<artifactId>jrebel-maven-plugin</artifactId>
						<version>1.1.1</version>
						<executions>
							<execution>
								<id>generate-rebel-xml</id>
								<phase>process-resources</phase>
								<goals>
									<goal>generate</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<configuration>
								<relativePath>../</relativePath>
								<!-- use a custom property for specifying root directory (note the 
									double $) set the property in JRebel configuration or as -Dmyproject.root=c:/projects/ -->
								<rootPath>$${myproject.root}</rootPath>
							</configuration>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- When built in OpenShift the 'openshift' profile will be used when 
				invoking mvn. -->
			<!-- Use this profile for any OpenShift specific customization your app 
				will need. -->
			<!-- By default that is to put the resulting archive into the 'deployments' 
				folder. -->
			<!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
			<id>openshift</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-war-plugin</artifactId>
						<version>2.1.1</version>
						<configuration>
							<outputDirectory>deployments</outputDirectory>
							<warName>ROOT</warName>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
